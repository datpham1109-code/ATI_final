datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}


model CambridgeBook {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  version Int
  imageCover String?
  tests Test[]
}

model Test {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  number Int
  sessonType SessionType


  cambridgeBookId String
  cambridgeBook CambridgeBook @relation(fields: [cambridgeBookId], references: [id], onDelete: Cascade)
  parts Part[]
}

enum SessionType {
  READING
  LISTENING
}


model Part {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String
  testId String
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)
  questions Question[]
  passage Passage?
}

model Question {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  content String
  partId String
  answer String
  part Part @relation(fields: [partId], references: [id], onDelete: Cascade)
}

model Passage {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content String
  partId String @unique // Ensures that each Part can have only one Passage
  part Part @relation(fields: [partId], references: [id], onDelete: Cascade)
}







enum UserRole {
  ADMIN
  USER
}




model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  isTwoFactorEnabled Boolean @default(false)

  accounts      Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

